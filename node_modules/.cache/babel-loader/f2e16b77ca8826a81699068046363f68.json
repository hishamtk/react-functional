{"ast":null,"code":"var _jsxFileName = \"/home/kaalan/Bootcamp/bootcamp/week10/react-proj/src/Context/GithubState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport { SET_LOADING, RESET_LOADING, ALL_USERS } from \"./types\";\nimport GithubContext from \"./GithubContext\";\nimport GithubReducer from \"./GithubReducer\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GithubState = props => {\n  _s();\n\n  const initialState = {\n    users: [],\n    user: {},\n    repos: [],\n    loading: false\n  };\n  const [state, dispatch] = useReducer(GithubReducer, initialState);\n\n  const getAllUsers = async () => {\n    try {\n      dispatch({\n        type: SET_LOADING\n      });\n      let res = await axios;\n    } catch (error) {\n      dispatch({\n        type: RESET_LOADING\n      });\n      console.error(\"error on api call \", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: { ...state,\n      getAllUsers\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n\n_s(GithubState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GithubState;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubState\");","map":{"version":3,"sources":["/home/kaalan/Bootcamp/bootcamp/week10/react-proj/src/Context/GithubState.js"],"names":["React","useReducer","SET_LOADING","RESET_LOADING","ALL_USERS","GithubContext","GithubReducer","axios","GithubState","props","initialState","users","user","repos","loading","state","dispatch","getAllUsers","type","res","error","console"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAAQC,WAAR,EAAoBC,aAApB,EAAkCC,SAAlC,QAAkD,SAAlD;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAE,EADY;AAEnBC,IAAAA,IAAI,EAAE,EAFa;AAGnBC,IAAAA,KAAK,EAAE,EAHY;AAInBC,IAAAA,OAAO,EAAE;AAJU,GAArB;AAMA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,UAAU,CAACK,aAAD,EAAgBI,YAAhB,CAApC;;AAEA,QAAMO,WAAW,GAAG,YAAU;AAC1B,QAAG;AACCD,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAChB;AAAN,OAAD,CAAR;AACA,UAAIiB,GAAG,GAAG,MAAMZ,KAAhB;AAEH,KAJD,CAIC,OAAMa,KAAN,EAAY;AACXJ,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAACf;AAAN,OAAD,CAAR;AACAkB,MAAAA,OAAO,CAACD,KAAR,CAAc,oBAAd,EAAqCA,KAArC;AACD;AACJ,GATD;;AAWA,sBAAO,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE,EAAC,GAAGL,KAAJ;AAAUE,MAAAA;AAAV;AAA/B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CArBD;;GAAMT,W;;KAAAA,W","sourcesContent":["import React, { useReducer } from \"react\";\n\nimport {SET_LOADING,RESET_LOADING,ALL_USERS} from \"./types\"\n\nimport GithubContext from \"./GithubContext\";\nimport GithubReducer from \"./GithubReducer\";\nimport axios from \"axios\";\n\nconst GithubState = (props) => {\n  const initialState = {\n    users: [],\n    user: {},\n    repos: [],\n    loading: false,\n  };\n  const [state, dispatch] = useReducer(GithubReducer, initialState)\n\n  const getAllUsers = async ()=>{\n      try{\n          dispatch({type:SET_LOADING})\n          let res = await axios\n\n      }catch(error){\n        dispatch({type:RESET_LOADING})\n        console.error(\"error on api call \" , error)\n      }\n  }\n\n  return <GithubContext.Provider value={{...state,getAllUsers}}></GithubContext.Provider>\n};\n"]},"metadata":{},"sourceType":"module"}